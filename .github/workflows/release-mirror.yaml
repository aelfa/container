name: Release - mirror

on:
  workflow_dispatch:
  push:
    branches:
    - master
    paths:
    - 'apps/**'
    - 'base/**'
    - 'nightly/**'
  pull_request:
    paths:
    - 'apps/**'
    - 'base/**'
    - 'nightly/**'

env:
  GOSS_SLEEP: 30
  MOBY: "moby/buildkit:latest"
  PLATFORM: "linux/amd64,linux/arm64"
  LICENSE: "GPL-3.0 DockServer.io"
  CODE_OWNED: "base image LSIO, changes dockserver.io"

jobs:
  get-version:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2.4.0
      with:
        token: ${{ secrets.CR_PAT }}
        fetch-depth: 0

    - name: Run Test & Get New Versions
      run: |
        API=$(curl -H "Authorization: token ${{ secrets.CR_PAT }}" -X GET https://api.github.com/rate_limit \
             | jq --raw-output '.rate.limit')
        if [[ $API -gt 101 ]]; then
           echo "Fetch new Versions"
           if test -f "./.github/version.sh"; then
              bash "./.github/version.sh"
           fi
        elif [[ $API -lt 100 ]]; then
             echo " GitHube API busted " && exit 0
        else
             echo " no reponse from Github API ? Maybe down or busted " && exit 0
        fi

  changes:
    name: Get changes
    runs-on: ubuntu-20.04
    needs:
    - get-version
    outputs:
      matrix: "{\"container\": ${{ steps.reduce.outputs.containers }} }"
    steps:
    - name: Checkout
      uses: actions/checkout@v2.4.0
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        list-files: json
        filters: |
          changed:
          - 'apps/**'
          - 'base/**'
          - 'nightly/**'
    - run: echo '${{ toJson(steps.filter.outputs) }}' > changes.json
    - id: reduce
      run: |
        CONTAINERS=$(jq --raw-output '.changed_files | fromjson | .[] |= sub("(?<filepath>(?<first_directory>(?<root1>[/]?)[^/]+/)(?<second_directory>(?<root2>[/]?)[^/]+)(?<extra_paths>.+))"; "\(.second_directory)") | unique' changes.json)
        echo ::set-output name=containers::${CONTAINERS}

  build:
    name: Build Docker
    runs-on: ubuntu-20.04

    permissions:
      contents: read
      packages: write
      id-token: write
      actions: write
      checks: write

    needs:
    - changes
    - get-version
    strategy:
      matrix: ${{ fromJson(needs.changes.outputs.matrix) }}
      fail-fast: false
    if: "!contains(github.event.head_commit.message, '[ci-skip]')"
    steps:
    - name: Checkout
      uses: actions/checkout@v2.4.0

    - name: Prepare
      id: prep
      run: |
        if test -f "./apps/${{ matrix.container }}/Dockerfile"; then
           CATEGORY="apps"
        elif test -f "./nightly/${{ matrix.container }}/Dockerfile"; then 
           CATEGORY="nightly"
        else
           CATEGORY="base"
        fi
        echo ::set-output name=category::${CATEGORY}
           VERSION=$(cat ./${CATEGORY}/${{ matrix.container }}/VERSION)
        echo ::set-output name=version::${VERSION}
           PLATFORM=$(cat ./${CATEGORY}/${{ matrix.container }}/PLATFORM)
        echo ::set-output name=platform::${PLATFORM}
           CREATED=$(date +'%Y-%m-%dT%H:%M:%SZ')
        echo ::set-output name=created::${CREATED}
        echo ::set-output name=source::dockserver.io
        echo ::set-output name=platformout::${{ env.PLATFORM }}
        echo ::set-output name=linc::${{ env.LICENSE }}
        echo ::set-output name=owndocker::${{ env.CODE_OWNED }}

        if [ "${{github.event_name}}" == "pull_request" ]; then
           echo ::set-output name=push::false
           echo ::set-output name=cache_from::"type=local,src=/tmp/.buildx-cache"
           echo ::set-output name=cache_to::""
        else
           echo ::set-output name=push::true
           echo ::set-output name=cache_from::"type=local,src=/tmp/.buildx-cache"
           echo ::set-output name=cache_to::"type=local,dest=/tmp/.buildx-cache,mode=max"
        fi

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1.2.0
      with:
        platforms: ${{ steps.prep.outputs.platformout }}

    - name: Install cosign
      if: github.event_name != 'pull_request'
      uses: sigstore/cosign-installer@1e95c1de343b5b0c23352d6417ee3e48d5bcd422
      with:
        cosign-release: 'v1.4.0'

    - name: Login in Registry || mirror
      uses: docker/login-action@v1.10.0
      if: github.event_name != 'pull_request'
      with:
          registry: ${{ secrets.OWN_REGISTRY }}
          username: ${{ secrets.QR_LOGIN }}
          password: ${{ secrets.CR_QUAI }}

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1.6.0
      with:
        install: true
        buildkitd-flags: --debug
        version: latest
        driver: docker-container
        driver-opts: |
          image=${{ env.MOBY }}
          network=host

    - name: Cache Docker layers
      uses: actions/cache@v2.1.7
      with:
        path: /tmp/.buildx-cache
        key: ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ matrix.container }}
        restore-keys: |
          ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ matrix.container }}

    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      with:
        images: ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ matrix.container }}

    - name: Build and Push Image
      id: build-and-push
      uses: docker/build-push-action@v2.7.0
      with:
        build-args: VERSION=${{ steps.prep.outputs.version }}
        context: .
        platforms: ${{ steps.prep.outputs.platformout }}
        file: ./${{ steps.prep.outputs.category }}/${{ matrix.container }}/Dockerfile
        push: ${{ steps.prep.outputs.push }}
        pull: ${{ steps.prep.outputs.push }}
        tags: |
          ${{ secrets.OWN_REGISTRY }}/${{ github.repository_owner }}/${{ matrix.container }}:latest
          ${{ secrets.OWN_REGISTRY }}/${{ github.repository_owner }}/${{ matrix.container }}:v${{ steps.prep.outputs.version }}
        cache-from: ${{ steps.prep.outputs.cache_from }}
        cache-to: ${{ steps.prep.outputs.cache_to }}
        labels: |
          maintainer=${{ github.repository_owner }}
          org.opencontainers.image.title=${{ matrix.container }}
          org.opencontainers.image.version=${{ steps.prep.outputs.version }}
          org.opencontainers.image.maintainer=${{ github.repository_owner }}
          org.opencontainers.image.created=${{ steps.prep.outputs.created }}
          org.opencontainers.image.authors=${{ github.repository_owner }}
          org.opencontainers.image.description=${{ matrix.container }}
          org.opencontainers.image.source=${{ steps.prep.outputs.source }}
          org.opencontainers.image.vendor=${{ github.repository_owner }}
          org.opencontainers.image.platform=${{ steps.prep.outputs.platformout }}
          org.opencontainers.image.license=${{ steps.prep.outputs.linc }}
          org.opencontainers.image.owner=${{ steps.prep.outputs.owndocker }}

    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

    - name: Sign the published Docker image
      if: ${{ github.event_name != 'pull_request' }}
      env:
        COSIGN_EXPERIMENTAL: "true"
      run: cosign sign ${{ secrets.OWN_REGISTRY }}/${{ github.repository_owner }}/${{ matrix.container }}@${{ steps.build-and-push.outputs.digest }}
