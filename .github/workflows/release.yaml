name: Release

on:
  workflow_dispatch:
  push:
    branches:
    - master
    paths:
    - 'base/**'
    - 'apps/**'
  pull_request:
    paths:
    - 'base/**'
    - 'apps/**'

env:
  GOSS_SLEEP: 30
  MOBY: "moby/buildkit:latest"

jobs:
  get-version:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2.4.0
      with:
        token: ${{ secrets.CR_PAT }}
        fetch-depth: 1
    - name: Fetch new Versions
      run: |
        if test -f "./.github/version.sh"; then
           bash "./.github/version.sh"
        fi

  changes:
    name: Get changes
    runs-on: ubuntu-20.04
    needs:
    - get-version
    outputs:
      matrix: "{\"container\": ${{ steps.reduce.outputs.containers }} }"
    steps:
    - name: Checkout
      uses: actions/checkout@v2.4.0
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        list-files: json
        filters: |
          changed:
          - 'apps/**'
          - 'base/**'
    - run: echo '${{ toJson(steps.filter.outputs) }}' > changes.json
    - id: reduce
      run: |
        CONTAINERS=$(jq --raw-output '.changed_files | fromjson | .[] |= sub("(?<filepath>(?<first_directory>(?<root1>[/]?)[^/]+/)(?<second_directory>(?<root2>[/]?)[^/]+)(?<extra_paths>.+))"; "\(.second_directory)") | unique' changes.json)
        echo ::set-output name=containers::${CONTAINERS}

  build:
    name: Build
    runs-on: ubuntu-20.04
    needs:
    - changes
    - get-version
    strategy:
      matrix: ${{ fromJson(needs.changes.outputs.matrix) }}
      fail-fast: false
    if: "!contains(github.event.head_commit.message, '[ci-skip]')"
    steps:
    - name: Checkout
      uses: actions/checkout@v2.4.0

    - name: Prepare
      id: prep
      run: |
        if test -f "./apps/${{ matrix.container }}/Dockerfile"; then
           CATEGORY="apps"
        else
           CATEGORY="base"
        fi
        echo ::set-output name=category::${CATEGORY}
           VERSION=$(cat ./${CATEGORY}/${{ matrix.container }}/VERSION)
        echo ::set-output name=version::${VERSION}
           PLATFORM=$(cat ./${CATEGORY}/${{ matrix.container }}/PLATFORM)
        echo ::set-output name=platform::${PLATFORM}
        CREATED=$(date +'%Y-%m-%dT%H:%M:%SZ')
        echo ::set-output name=created::${CREATED}

        if [ "${{github.event_name}}" == "pull_request" ]; then
           echo ::set-output name=push::false
           echo ::set-output name=cache_from::"type=local,src=/tmp/.buildx-cache"
           echo ::set-output name=cache_to::""
        else
           echo ::set-output name=push::true
           echo ::set-output name=cache_from::"type=local,src=/tmp/.buildx-cache"
           echo ::set-output name=cache_to::"type=local,dest=/tmp/.buildx-cache,mode=max"
        fi

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1.2.0
      with:
        platforms: ${{ steps.prep.outputs.platform }}

    - name: Login to GHCR
      uses: docker/login-action@v1.10.0
      if: github.event_name != 'pull_request'
      with:
        registry: ${{ secrets.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.CR_PAT }}

    # Install and configure Buildx
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1.6.0
      with:
        install: true
        version: latest
        driver-opts: |
          image=${{ env.MOBY }}
          network=host
        config: .github/buildkitd.toml

    - name: Cache Docker layers
      uses: actions/cache@v2.1.7
      with:
        path: /tmp/.buildx-cache
        key: ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ matrix.container }}
        restore-keys: |
          ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ matrix.container }}

    - name: Set up goss/dgoss
      uses: e1himself/goss-installation-action@v1.0.3
      if: ${{ steps.prep.outputs.goss == 'true' }}
      with:
        version: 'v0.3.16'

    - name: Build and Load local test-container
      uses: docker/build-push-action@v2.7.0
      with:
        build-args: VERSION=${{ steps.prep.outputs.version }}
        context: .
        file: ./${{ steps.prep.outputs.category }}/${{ matrix.container }}/Dockerfile
        load: true
        tags: |
          ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ matrix.container }}:test
        cache-from: ${{ steps.prep.outputs.cache_from }}
        cache-to: ${{ steps.prep.outputs.cache_to }}

    - name: Run Docker tests
      env:
        GOSS_WAIT_OPTS: "-r 90s -s 2s"
        GOSS_FILE: ./${{ steps.prep.outputs.category }}/${{ matrix.container }}/goss.yaml
      run: |
        if test -f "./${CATEGORY}/${{ matrix.container }}/goss.yaml"; then
           dgoss run ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ matrix.container }}:test
        else
           docker run --rm ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ matrix.container }}:test
        fi

    - name: Build and Push Image
      uses: docker/build-push-action@v2.7.0
      with:
        build-args: VERSION=${{ steps.prep.outputs.version }}
        context: .
        platforms: ${{ steps.prep.outputs.platform }}
        file: ./${{ steps.prep.outputs.category }}/${{ matrix.container }}/Dockerfile
        push: ${{ steps.prep.outputs.push }}
        tags: |
          ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ matrix.container }}:latest
          ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ matrix.container }}:v${{ steps.prep.outputs.version }}
        cache-from: ${{ steps.prep.outputs.cache_from }}
        cache-to: ${{ steps.prep.outputs.cache_to }}
        labels: |
          org.opencontainers.image.title=${{ matrix.container }}
          org.opencontainers.image.version=${{ steps.prep.outputs.version }}
          org.opencontainers.image.maintainer=${{ github.repository_owner }}
          org.opencontainers.image.created=${{ steps.prep.outputs.created }}

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv ${{ steps.prep.outputs.cache_from }} ${{ steps.prep.outputs.cache_to }}

    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}
