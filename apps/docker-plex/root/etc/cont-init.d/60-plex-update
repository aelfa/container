#!/usr/bin/with-contenv bash

# If docker manages versioning exit
if [ "${VERSION}" ] && [ "${VERSION}" == 'docker' ]; then
   echo "Docker is used for versioning skip update check" && exit 0
else
   VERSION=latest
fi

# test if plex is installed and try re-pulling latest if not
if (dpkg --get-selections plexmediaserver | grep -wq "install"); then
:
else
echo "for some reason plex doesn't appear to be installed, pulling a new copy and exiting out of update script"
curl -o /tmp/plexmediaserver.deb -L \
       	"${PLEX_DOWNLOAD}/${REMOTE_VERSION}/debian/plexmediaserver_${REMOTE_VERSION}_${PLEX_ARCH}.deb" && \
dpkg -i --force-confold /tmp/plexmediaserver.deb
rm -f /tmp/plexmediaserver.deb
exit 0
fi

# set update failed message
[[ -e /tmp/update_fail.nfo ]] && \
  rm /tmp/update_fail.nfo
UPGRADE_FAIL='/tmp/update_fail.nfo'
cat > "${UPGRADE_FAIL}" <<-EOFFAIL
########################################################
# Upgrade attempt failed, this could be because either #
# plex update site is down, local network issues, or   #
# you were trying to get a version that simply doesn't #
# exist, check over the VERSION variable thoroughly &  #
# correct it or try again later.                       #
########################################################
EOFFAIL

# set header for no preferences/token message
[[ -e /tmp/no-token.nfo ]] && \
 rm /tmp/no-token.nfo
NOTOKEN_SET='/tmp/no-token.nfo'
cat > "${NOTOKEN_SET}" <<-EOFTOKEN
#####################################################
#   Login via the webui at http://<ip>:32400/web    #
#   and restart the docker, because there was no    #
EOFTOKEN

if [ ! -e "/config/Library/Application Support/Plex Media Server/Preferences.xml" ]; then
cat >> "${NOTOKEN_SET}" <<-EOFTOKEN
#   preference file found, possibly first startup.  #
#####################################################
EOFTOKEN
   printf '\n\n\n%s\n\n\n' "$(</tmp/no-token.nfo)"
   exit 0
fi

PLEX_TOKEN=$( sed -n 's/.*PlexOnlineToken="//p' \
       	"/config/Library/Application Support/Plex Media Server/Preferences.xml" \
       	| sed "s/\".*//")

# if plex token isn't found, exit out
if [ -z "$PLEX_TOKEN" ]; then
cat >> "${NOTOKEN_SET}" <<-EOFTOKEN
#      plex token found in the preference file      #
#####################################################
EOFTOKEN
   printf '\n\n\n%s\n\n\n' "$(</tmp/no-token.nfo)"
   exit 0
fi

INSTALLED_VERSION=$(dpkg-query -W -f='${Version}' plexmediaserver)
if [[ "${VERSION,,}" = latest ]] || [[ "${VERSION,,}" = plexpass ]] || [[ "$PLEXPASS" == "1" ]]; then
  if [[ "${PLEX_ARCH}" = amd64 ]]; then
    PLEX_URL_ARCH="x86_64"
  elif [[ "${PLEX_ARCH}" = armhf ]]; then
    PLEX_URL_ARCH="armv7hf_neon"
  elif [[ "${PLEX_ARCH}" = arm64 ]]; then
    PLEX_URL_ARCH="aarch64"
  fi
  REMOTE_VERSION=$(curl -s "https://plex.tv/downloads/details/5?distro=debian&build=linux-${PLEX_URL_ARCH}&channel=8&X-Plex-Token=$PLEX_TOKEN"| grep -oP 'version="\K[^"]+' | tail -n 1 )
elif [[ "${VERSION,,}" = public ]]; then
  REMOTE_VERSION=$(curl -sX GET 'https://plex.tv/api/downloads/5.json' | jq -r '.computer.Linux.version')
else
  REMOTE_VERSION="${VERSION}"
fi

if [[ "$REMOTE_VERSION" == "$INSTALLED_VERSION" ]]; then
   exit 0
fi
if [ ! -x /usr/bin/wget ] ; then
   echo "wget install is required" && apt install wget >/dev/null 2>&1
fi

echo "Atempting to upgrade to: $REMOTE_VERSION"
rm -f /tmp/plexmediaserver_*.deb
wget -nv -P /tmp \
"${PLEX_DOWNLOAD}/${REMOTE_VERSION}/debian/plexmediaserver_${REMOTE_VERSION}_${PLEX_ARCH}.deb"

last=$?

if [[ "$last" -gt "0" ]] || [[ $(stat -c %s /tmp/plexmediaserver_"${REMOTE_VERSION}"_${PLEX_ARCH}.deb) -lt 10000 ]]; then
   printf '\n\n\n%s\n\n\n' "$(</tmp/update_fail.nfo)"
   exit 0
else
   dpkg -i --force-confold /tmp/plexmediaserver_"${REMOTE_VERSION}"_${PLEX_ARCH}.deb
   rm -f /tmp/plexmediaserver_*.deb
fi
