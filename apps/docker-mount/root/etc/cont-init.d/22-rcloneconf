#!/usr/bin/with-contenv bash
# shellcheck shell=bash
#####################################
# All rights reserved.              #
# started from Zero                 #
# Docker owned dockserver           #
# Docker Maintainer dockserver      #
#####################################
#####################################
# THIS DOCKER IS UNDER LICENSE      #
# NO CUSTOMIZING IS ALLOWED         #
# NO REBRANDING IS ALLOWED          #
# NO CODE MIRRORING IS ALLOWED      #
#####################################
function log() {
   echo "[MOUNT] ${1}"
}
log "-> Setting Folder Creating || start <-"
mkdir -p /app/rclone
mkdir -p /app/rclone/scripts
mkdir -p /system/mount/{logs,env,rclone,keys}

CSV=/system/mount/drive.csv
JSONDIR=/system/mount/keys
GDSAARRAY=$(ls -l ${JSONDIR} | egrep -c '*.json')
ENDCONFIG=/app/rclone/rclone.conf
source /system/mount/mount.env

SOURCECONFIG=/system/rclone/rclone.conf
ENDFILE=/system/mount/drive.csv
TMPCONFIG=/app/rclone/rclonegd.conf

##COPY RCLONE-CONF
if [[ $GDSAARRAY != 0 ]]; then
   mkdir -p /system/mount/{logs,env,rclone,keys}

   if [[ -f $TMPCONFIG ]]; then
      rm -rf $TMPCONFIG
   fi
   if [[ ! -f $TMPCONFIG ]]; then
      awk '$1~search {p=1} NF==0 {p=0}; p' search="gdrive|gcrypt" $SOURCECONFIG >$TMPCONFIG
   fi

   if [[ ! -f $ENDFILE ]]; then
      IFS=$'\n'
      filter="$1"
      mapfile -t mounts < <(eval rclone listremotes --config=$SOURCECONFIG | grep "$1" | sed -e 's/://g' | sed '/union/d' | sed '/remote/d' | sed '/GDSA/d' | sed '/crypt/d' | sed '/gdrive/d')
      for i in ${mounts[@]}; do
         NRTD=$((NRTD + 1))
         TDID=$(rclone config show $i --config=${SOURCECONFIG} | egrep team_drive | awk $'{print $3}')
         GETP=$(grep -C7 "$TDID" $SOURCECONFIG | tail -1 | sed "s/\[//g" | sed "s/\]//g" | awk $'{print $3}')
         GETS=$(grep -C8 "$TDID" $SOURCECONFIG | tail -1 | sed "s/\[//g" | sed "s/\]//g" | awk $'{print $3}')
         LREMO=$(rclone listremotes --config=$SOURCECONFIG | grep "$1" | sed -e 's/://g' | sed '/union/d' | sed '/remote/d' | sed '/GDSA/d' | sed '/gdrive/d' | sed '/crypt/d' | wc -l)
         ####RCRYPT=$(rclone config show tcrypt-$i --config=${SOURCECONFIG} | grep "type = crypt" &>/dev/null)
         RCRYPT=$(grep $i:/encrypt $SOURCECONFIG | sed "s/\[//g" | sed "s/\]//g" | awk $'{print $3}')
         if [[ $RCRYPT != "" ]]; then
            echo -e "tdrive$NRTD|${TDID}|${GETP}|${GETS}" >>$ENDFILE
         else
            echo -e "tdrive$NRTD|${TDID}" >>$ENDFILE
         fi
      done
   else
      echo "${ENDFILE} exist"
   fi
   if [[ -f $ENDCONFIG ]]; then sed -i '/^$/d' $ENDCONFIG; fi

   if [[ -f $ENDCONFIG ]]; then rm -rf $ENDCONFIG; fi

   if [[ ! -f /system/mount/.keys/lastkey ]]; then
      MINJS=1
   else
      MINJS=$(cat /system/mount/.keys/lastkey)
   fi

   COUNT=$MINJS

   sed '/^\s*#.*$/d' $ENDFILE | \
   while IFS=$'|' read -r -a myArray; do
      if [[ ${myArray[2]} == "" && ${myArray[3]} == "" ]]; then
         echo -e "\n
[${myArray[0]}]
type = drive
scope = drive
server_side_across_configs = true
service_account_file = ${JSONDIR}/GDSA${MINJS}.json
service_account_file_path = ${JSONDIR}
team_drive = ${myArray[1]}" >>$ENDCONFIG
         rclone lsd ${myArray[0]}: --drive-service-account-file=$JSONDIR/GDSA$MINJS.json --fast-list --config=$ENDCONFIG
         if [ $? != 0 ]; then
            rclone config delete ${myArray[0]} --config=$ENDCONFIG
         fi
      else
         echo -e "\n
[${myArray[0]}]
type = drive
scope = drive
server_side_across_configs = true
service_account_file = ${JSONDIR}/GDSA${MINJS}.json
service_account_file_path = ${JSONDIR}
team_drive = ${myArray[1]}" >>$ENDCONFIG
         rclone lsd ${myArray[0]}: --drive-service-account-file=$JSONDIR/GDSA$MINJS.json --fast-list --config=$ENDCONFIG
         if [ $? != 0 ]; then
            rclone config delete ${myArray[0]} --config=$ENDCONFIG
         else
            if [[ ${HASHPASSWORD} == "plain" && ${HASHPASSWORD} != "hashed" ]]; then
               ENC_PASSWORD=$(rclone obscure ${myArray[2]} | tail -n1)
               ENC_SALT=$(rclone obscure ${myArray[3]} | tail -n1)
            else
               ENC_PASSWORD=${myArray[2]}
               ENC_SALT=${myArray[3]}

               echo -e "\n[tcrypt-${myArray[0]}]
type = crypt
remote = ${myArray[0]}:/encrypt
filename_encryption = standard
directory_name_encryption = true
password = ${ENC_PASSWORD}
password2 = ${ENC_SALT}" >>$ENDCONFIG
               rclone mkdir ${myArray[0]}:/encrypt --drive-service-account-file=$JSONDIR/GDSA$MINJS.json --config=$ENDCONFIG
            fi
         fi
      fi
   done
   if [[ -f $TMPCONFIG ]]; then
      awk '$1~search {p=1} NF==0 {p=0}; p' search="gdrive|gcrypt" $TMPCONFIG >>$ENDCONFIG
   fi
else
   if [[ ! -f $ENDCONFIG ]]; then
      ln -sv $SOURCECONFIG $ENDCONFIG
   else
      rm -rf $ENDCONFIG && ln -sv $SOURCECONFIG $ENDCONFIG
   fi
fi
sed -i "s#rotate 4#rotate 1#g" /etc/logrotate.conf
sed -i "s#weekly#daily#g" /etc/logrotate.conf
log "-> Well done rclone.conf is created <-"
#<EOF>#
