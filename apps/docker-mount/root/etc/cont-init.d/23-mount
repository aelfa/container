#!/usr/bin/with-contenv bash
# shellcheck shell=bash
#####################################
# All rights reserved.              #
# started from Zero                 #
# Docker owned dockserver           #
# Docker Maintainer dockserver      #
#####################################
#####################################
# THIS DOCKER IS UNDER LICENSE      #
# NO CUSTOMIZING IS ALLOWED         #
# NO REBRANDING IS ALLOWED          #
# NO CODE MIRRORING IS ALLOWED      #
#####################################
function log() {
	echo "[Mount] ${1}"
}
source /system/mount/mount.env
##### FOLDER START #####
SMOUNT=/app/rclone/scripts
SDOWN=/mnt/downloads
SUNION=/mnt/unionfs
TMPRCLONE=${TMPRCLONE}
LOGS=/system/mount/logs
JSONDIR=/system/mount/keys
CONFIG=/app/rclone/rclone.conf
GDSAARRAY=$(ls -l ${JSONDIR} | egrep -c '*.json')

truncate -s 0 /system/mount/logs/*.log
if [[ ${GDSAARRAY} != 0 ]]; then
   if [[ ! -d "/system/mount/.keys" ]]; then
      mkdir -p /system/mount/.keys/ && chown -cR 1000:1000 /system/mount/.keys/
   else
      chown -cR 1000:1000 /system/mount/.keys/
   fi
   if [[ ! -f /system/mount/.keys/lastkey ]]; then
      FMINJS=1
   else
      FMINJS=$(cat /system/mount/.keys/lastkey)
   fi
   GDSAARRAY=$(ls -l ${JSONDIR} | egrep -c '*.json')
   MINJS=${FMINJS}
   MAXJS=${GDSAARRAY}
   COUNT=$MINJS
   IFS=$'\n'
   filter="$1"
   mapfile -t mounts < <(eval rclone listremotes --config=${CONFIG} | grep "$filter" | sed -e 's/://g' | sed '/crypt/d' | sed '/gdrive/d' | sed '/union/d' | sed '/remote/d' | sed '/GDSA/d')
   for i in ${mounts[@]}; do
       rclone config update $i service_account_file $JSONDIR/GDSA$COUNT.json --config=${CONFIG}
       rclone config update $i service_account_file_path $JSONDIR --config=${CONFIG}
   done
   echo "${COUNT}" >/system/mount/.keys/lastkey
fi

value=/tmp/rcunion.union
if [[ -f ${value} ]]; then rm -rf ${value}; fi
IFS=$'\n'
filter="$1"
CONFIG=/app/rclone/rclone.conf
mapfile -t mounts < <(eval rclone listremotes --config=${CONFIG} | grep "$filter" | sed '/union/d' | sed '/remote/d' | sed '/GDSA/d')
for i in ${mounts[@]}; do
   echo -n "$i " >>${value}
done
mapfile -t mapped < <(eval cat ${value})
for i in ${mapped[@]}; do
  echo "Adding" ${mapped[0]}
  rclone config create remote union upstreams $i action_policy 'all' create_policy 'all' search_policy 'all' cache_time 120 --config=${CONFIG}
done

chown -hR abc:abc ${LOGS} && chmod -R 775 ${LOGS}
chown -hR abc:abc ${SMOUNT} && chmod -R 775 ${SMOUNT}

SMOUNT=/app/mount
find ${SMOUNT} -type f -name "mount.sh" | while read file; do
   chmod -cR 755 "$file" && bash "$file"
done

file1=/system/mount/mount.env
file2=/tmp/mount.env
rm -rf "$file2" && cp "$file1" "$file2"

#<EOF>#
